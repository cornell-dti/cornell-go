generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  GOOGLE
  APPLE
  DEVICE
  NONE
}

enum EventRewardType {
  LIMITED_TIME
  PERPETUAL
}

enum SessionLogEvent {
  JOIN_GROUP //data = groupId
  LEAVE_GROUP //data = groupId
  LOGIN_USER //data = userId
  CREATE_USER //data = userId
  DELETE_USER //data = userId
  EDIT_USERNAME //data = userId
  SELECT_EVENT //data = eventId
  DELETE_EVENT //data = eventId
  SET_CHALLENGE //data = challengeId
  DELETE_CHALLENGE //data = challengeId
  COMPLETE_CHALLENGE //data = challengeId
  DELETE_REWARD //data = rewardId
  DISCONNECT //data = ""
}

enum OrganizationSpecialUsage {
  ///DEVICE_LOGIN is a device assigned-id that acts as a user login for non-Cornell users.
  DEVICE_LOGIN
  CORNELL_LOGIN
  NONE
}

model User {
  id                  String          @id() @default(uuid())
  authToken           String
  authType            AuthType
  username            String
  major               String
  year                String
  email               String
  hashedRefreshToken  String
  administrator       Boolean
  score               Int
  rewards             EventReward[]
  group               Group           @relation("member", fields: [groupId], references: [id])
  groupId             String
  hostOf              Group?          @relation("host")
  eventTrackers       EventTracker[]
  completedChallenges PrevChallenge[] @relation("owner")
  memberOf            Organization[]  @relation("player")
  managerOf           Organization[]  @relation("manager")
  isRanked            Boolean         @default(true)
  participatedIn      PrevChallenge[] @relation("participant")
  sessionLogEntries     SessionLogEntry[]
}

model Group {
  id         String    @id @default(uuid())
  friendlyId String    @unique
  members    User[]    @relation("member")
  host       User?     @relation("host", fields: [hostId], references: [id], onDelete: SetNull)
  hostId     String?   @unique
  curEvent   EventBase @relation(fields: [curEventId], references: [id])
  curEventId String
}

model Challenge {
  id             String          @id @default(uuid()) @map("id")
  linkedEvent    EventBase?      @relation("all", fields: [linkedEventId], references: [id], onDelete: Cascade)
  linkedEventId  String?
  eventIndex     Int
  name           String
  description    String
  imageUrl       String
  latitude       Float
  longitude      Float
  awardingRadius Float
  closeRadius    Float
  completions    PrevChallenge[]
  activeTrackers EventTracker[]
  defaultOf      EventBase?      @relation("default")
}

model EventBase {
  id                 String          @id @default(uuid())
  requiredMembers    Int
  name               String
  description        String
  rewardType         EventRewardType
  indexable          Boolean
  endTime            DateTime
  minimumScore       Int             @default(1)
  rewards            EventReward[]
  challenges         Challenge[]     @relation("all")
  usedIn             Organization[]  @relation("events")
  defaultOf          Organization[]  @relation("defaultOrg")
  defaultChallenge   Challenge       @relation("default", fields: [defaultChallengeId], references: [id])
  defaultChallengeId String          @unique
  trackers           EventTracker[]
  activeGroups       Group[]
}

model EventReward {
  id            String    @id @default(uuid())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  event         EventBase @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String
  eventIndex    Int
  description   String
  redeemInfo    String
  isRedeemed    Boolean
  isAchievement Boolean
  points        Int
}

model EventTracker {
  id                  String          @id @default(uuid())
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  score               Int
  isRankedForEvent    Boolean         @default(true)
  event               EventBase       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId             String
  curChallenge        Challenge       @relation(fields: [curChallengeId], references: [id])
  curChallengeId      String
  completedChallenges PrevChallenge[]
}

model PrevChallenge {
  id           Int          @id @default(autoincrement())
  user         User         @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  participants User[]       @relation("participant")
  challenge    Challenge    @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId  String
  tracker      EventTracker @relation(fields: [trackerId], references: [id], onDelete: Cascade)
  trackerId    String
  timestamp    DateTime     @default(now())
}

model Organization {
  id             String                   @id @default(uuid())
  name           String
  accessCode     String
  members        User[]                   @relation("player")
  managers       User[]                   @relation("manager")
  events         EventBase[]              @relation("events")
  defaultEvent   EventBase                @relation("defaultOrg", fields: [defaultEventId], references: [id], onDelete: Restrict)
  defaultEventId String
  specialUsage   OrganizationSpecialUsage
}

model SessionLogEntry {
  id         String          @id @default(uuid())
  linkedUser User?           @relation(fields: [userId], references: [id])
  eventType  SessionLogEvent
  data       String
  timestamp  DateTime        @default(now())
  userId     String?
}
