generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  GOOGLE
  APPLE
  DEVICE
  NONE
}

enum TimeLimitationType {
  LIMITED_TIME
  PERPETUAL
}

enum EnrollmentType {
  UNDERGRADUATE
  GRADUATE
  FACULTY
  ALUMNI
}

enum LocationType {
  ENG_QUAD
  ARTS_QUAD
  AG_QUAD
  NORTH_CAMPUS
  WEST_CAMPUS
  COLLEGETOWN
  ITHACA_COMMONS
  ANY
}

enum AchievementType {
  TOTAL_POINTS
  TOTAL_CHALLENGES
  TOTAL_JOURNEYS
  TOTAL_CHALLENGES_OR_JOURNEYS
}

enum DifficultyMode {
  EASY
  NORMAL
  HARD
}

enum SessionLogEvent {
  JOIN_GROUP //data = groupId
  LEAVE_GROUP //data = groupId
  LOGIN_USER //data = userId
  CREATE_USER //data = userId
  DELETE_USER //data = userId
  EDIT_USERNAME //data = userId
  SELECT_EVENT //data = eventId
  DELETE_EVENT //data = eventId
  SET_CHALLENGE //data = challengeId
  DELETE_CHALLENGE //data = challengeId
  COMPLETE_CHALLENGE //data = challengeId
  DISCONNECT //data = ""
}

enum OrganizationSpecialUsage {
  ///DEVICE_LOGIN is a device assigned-id that acts as a user login for non-Cornell users.
  DEVICE_LOGIN
  CORNELL_LOGIN
  NONE
}

model User {
  id                  String               @id() @default(uuid())
  authToken           String
  authType            AuthType
  username            String
  year                String
  email               String
  hashedRefreshToken  String
  administrator       Boolean
  enrollmentType      EnrollmentType
  score               Int
  isBanned            Boolean              @default(false)
  group               Group                @relation("member", fields: [groupId], references: [id])
  groupId             String
  hostOf              Group?               @relation("host")
  eventTrackers       EventTracker[]
  favorites           EventBase[]
  completedChallenges PrevChallenge[]      @relation("owner")
  memberOf            Organization[]       @relation("orgToUser")
  managerOf           Organization[]       @relation("orgManager")
  isRanked            Boolean              @default(true)
  participatedIn      PrevChallenge[]      @relation("prevChallengeParticipant")
  sessionLogEntries   SessionLogEntry[]
  achievementTrackers AchievementTracker[]
}

model Group {
  id         String    @id @default(uuid())
  friendlyId String    @unique
  members    User[]    @relation("member")
  host       User?     @relation("host", fields: [hostId], references: [id], onDelete: SetNull)
  hostId     String?   @unique
  curEvent   EventBase @relation(fields: [curEventId], references: [id])
  curEventId String
}

model Challenge {
  id             String          @id @default(uuid()) @map("id")
  linkedEvent    EventBase?      @relation("all", fields: [linkedEventId], references: [id], onDelete: Cascade)
  linkedEventId  String?
  eventIndex     Int
  name           String
  location       LocationType
  description    String
  imageUrl       String
  latitude       Float
  longitude      Float
  awardingRadius Float
  closeRadius    Float
  completions    PrevChallenge[]
  activeTrackers EventTracker[]
}

model EventBase {
  id              String             @id @default(uuid())
  requiredMembers Int
  name            String
  description     String
  timeLimitation  TimeLimitationType
  indexable       Boolean
  endTime         DateTime
  challenges      Challenge[]        @relation("all")
  userFavorite    User[]
  usedIn          Organization[]     @relation("eventOrgs")
  trackers        EventTracker[]
  activeGroups    Group[]
  latitude        Float
  longitude       Float
  achievements    Achievement[]
  difficulty      DifficultyMode
}

model EventTracker {
  id                  String          @id @default(uuid())
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  score               Int
  isRankedForEvent    Boolean         @default(true)
  event               EventBase       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId             String
  curChallenge        Challenge       @relation(fields: [curChallengeId], references: [id])
  curChallengeId      String
  completedChallenges PrevChallenge[]
}

model PrevChallenge {
  id           Int          @id @default(autoincrement())
  user         User         @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  participants User[]       @relation("prevChallengeParticipant")
  challenge    Challenge    @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId  String
  tracker      EventTracker @relation(fields: [trackerId], references: [id], onDelete: Cascade)
  trackerId    String
  timestamp    DateTime     @default(now())
}

model Organization {
  id           String                   @id @default(uuid())
  name         String
  accessCode   String
  members      User[]                   @relation("orgToUser")
  managers     User[]                   @relation("orgManager")
  events       EventBase[]              @relation("eventOrgs")
  specialUsage OrganizationSpecialUsage
}

model SessionLogEntry {
  id         String          @id @default(uuid())
  linkedUser User?           @relation(fields: [userId], references: [id])
  eventType  SessionLogEvent
  data       String
  timestamp  DateTime        @default(now())
  userId     String?
}

model Achievement {
  id              String               @id @default(uuid())
  requiredPoints  Int
  name            String
  description     String
  imageUrl        String
  linkedEvent     EventBase?           @relation(fields: [linkedEventId], references: [id])
  linkedEventId   String?
  locationType    LocationType
  achievementType AchievementType
  trackers        AchievementTracker[]
}

model AchievementTracker {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  progress      Int
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  dateComplete  DateTime?
  achievementId String
  userId        String
}
