// CODE AUTOGENERATED BY npm run updateapi
// IF YOU MODIFY THIS FILE, MAKE SURE TO ALSO MODIFY THE updateapi SCRIPT!
// OTHERWISE YOUR CHANGES MAY BE OVERWRITTEN!
enum AchievementTypeDto {
  TOTAL_POINTS,
  TOTAL_CHALLENGES,
  TOTAL_JOURNEYS,
  TOTAL_CHALLENGES_OR_JOURNEYS,
}

enum LoginAudDto {
  android,
  ios,
  web,
}

enum LoginEnrollmentTypeDto {
  UNDERGRADUATE,
  GRADUATE,
  FACULTY,
  ALUMNI,
  GUEST,
}

enum ChallengeLocationDto {
  ENG_QUAD,
  ARTS_QUAD,
  AG_QUAD,
  NORTH_CAMPUS,
  WEST_CAMPUS,
  COLLEGETOWN,
  ITHACA_COMMONS,
  ANY,
}

enum EventCategoryDto {
  FOOD,
  NATURE,
  HISTORICAL,
  CAFE,
  DININGHALL,
  DORM,
}

enum EventTimeLimitationDto {
  LIMITED_TIME,
  PERPETUAL,
}

enum EventDifficultyDto {
  Easy,
  Normal,
  Hard,
}

enum SetAuthToOAuthProviderDto {
  apple,
  google,
}

enum UserEnrollmentTypeDto {
  UNDERGRADUATE,
  GRADUATE,
  FACULTY,
  ALUMNI,
  GUEST,
}

enum UserAuthTypeDto {
  apple,
  google,
  device,
}

class AchievementDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['id'] = id;
    if (eventId != null) {
      fields['eventId'] = eventId;
    }
    if (requiredPoints != null) {
      fields['requiredPoints'] = requiredPoints;
    }
    if (name != null) {
      fields['name'] = name;
    }
    if (description != null) {
      fields['description'] = description;
    }
    if (imageUrl != null) {
      fields['imageUrl'] = imageUrl;
    }
    if (locationType != null) {
      fields['locationType'] = locationType!.name;
    }
    if (achievementType != null) {
      fields['achievementType'] = achievementType!.name;
    }
    if (initialOrganizationId != null) {
      fields['initialOrganizationId'] = initialOrganizationId;
    }
    return fields;
  }

  AchievementDto.fromJson(Map<String, dynamic> fields) {
    id = fields["id"];
    eventId = fields.containsKey('eventId') ? (fields["eventId"]) : null;
    requiredPoints = fields.containsKey('requiredPoints')
        ? (fields["requiredPoints"])
        : null;
    name = fields.containsKey('name') ? (fields["name"]) : null;
    description =
        fields.containsKey('description') ? (fields["description"]) : null;
    imageUrl = fields.containsKey('imageUrl') ? (fields["imageUrl"]) : null;
    locationType = fields.containsKey('locationType')
        ? (ChallengeLocationDto.values.byName(fields['locationType']))
        : null;
    achievementType = fields.containsKey('achievementType')
        ? (AchievementTypeDto.values.byName(fields['achievementType']))
        : null;
    initialOrganizationId = fields.containsKey('initialOrganizationId')
        ? (fields["initialOrganizationId"])
        : null;
  }

  void partialUpdate(AchievementDto other) {
    id = other.id;
    eventId = other.eventId == null ? eventId : other.eventId;
    requiredPoints =
        other.requiredPoints == null ? requiredPoints : other.requiredPoints;
    name = other.name == null ? name : other.name;
    description = other.description == null ? description : other.description;
    imageUrl = other.imageUrl == null ? imageUrl : other.imageUrl;
    locationType =
        other.locationType == null ? locationType : other.locationType;
    achievementType =
        other.achievementType == null ? achievementType : other.achievementType;
    initialOrganizationId = other.initialOrganizationId == null
        ? initialOrganizationId
        : other.initialOrganizationId;
  }

  AchievementDto({
    required this.id,
    this.eventId,
    this.requiredPoints,
    this.name,
    this.description,
    this.imageUrl,
    this.locationType,
    this.achievementType,
    this.initialOrganizationId,
  });

  late String id;
  late String? eventId;
  late int? requiredPoints;
  late String? name;
  late String? description;
  late String? imageUrl;
  late ChallengeLocationDto? locationType;
  late AchievementTypeDto? achievementType;
  late String? initialOrganizationId;
}

class AchievementTrackerDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['userId'] = userId;
    fields['progress'] = progress;
    fields['achievementId'] = achievementId;
    if (dateComplete != null) {
      fields['dateComplete'] = dateComplete;
    }
    return fields;
  }

  AchievementTrackerDto.fromJson(Map<String, dynamic> fields) {
    userId = fields["userId"];
    progress = fields["progress"];
    achievementId = fields["achievementId"];
    dateComplete =
        fields.containsKey('dateComplete') ? (fields["dateComplete"]) : null;
  }

  void partialUpdate(AchievementTrackerDto other) {
    userId = other.userId;
    progress = other.progress;
    achievementId = other.achievementId;
    dateComplete =
        other.dateComplete == null ? dateComplete : other.dateComplete;
  }

  AchievementTrackerDto({
    required this.userId,
    required this.progress,
    required this.achievementId,
    this.dateComplete,
  });

  late String userId;
  late int progress;
  late String achievementId;
  late String? dateComplete;
}

class UpdateAchievementDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['achievement'] = achievement!.toJson();
    fields['deleted'] = deleted;
    return fields;
  }

  UpdateAchievementDataDto.fromJson(Map<String, dynamic> fields) {
    achievement = AchievementDto.fromJson(fields['achievement']);
    deleted = fields["deleted"];
  }

  void partialUpdate(UpdateAchievementDataDto other) {
    achievement = other.achievement;
    deleted = other.deleted;
  }

  UpdateAchievementDataDto({
    required this.achievement,
    required this.deleted,
  });

  late AchievementDto achievement;
  late bool deleted;
}

class RequestAchievementDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['achievements'] = achievements;
    return fields;
  }

  RequestAchievementDataDto.fromJson(Map<String, dynamic> fields) {
    achievements = List<String>.from(fields['achievements']);
  }

  void partialUpdate(RequestAchievementDataDto other) {
    achievements = other.achievements;
  }

  RequestAchievementDataDto({
    required this.achievements,
  });

  late List<String> achievements;
}

class LoginDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['idToken'] = idToken;
    fields['latF'] = latF;
    fields['longF'] = longF;
    if (username != null) {
      fields['username'] = username;
    }
    if (year != null) {
      fields['year'] = year;
    }
    if (college != null) {
      fields['college'] = college;
    }
    if (major != null) {
      fields['major'] = major;
    }
    if (interests != null) {
      fields['interests'] = interests;
    }
    if (aud != null) {
      fields['aud'] = aud!.name;
    }
    fields['enrollmentType'] = enrollmentType!.name;
    return fields;
  }

  LoginDto.fromJson(Map<String, dynamic> fields) {
    idToken = fields["idToken"];
    latF = fields["latF"]!.toDouble();
    longF = fields["longF"]!.toDouble();
    username = fields.containsKey('username') ? (fields["username"]) : null;
    year = fields.containsKey('year') ? (fields["year"]) : null;
    college = fields.containsKey('college') ? (fields["college"]) : null;
    major = fields.containsKey('major') ? (fields["major"]) : null;
    interests = fields.containsKey('interests') ? (fields["interests"]) : null;
    aud = fields.containsKey('aud')
        ? (LoginAudDto.values.byName(fields['aud']))
        : null;
    enrollmentType =
        LoginEnrollmentTypeDto.values.byName(fields['enrollmentType']);
  }

  void partialUpdate(LoginDto other) {
    idToken = other.idToken;
    latF = other.latF;
    longF = other.longF;
    username = other.username == null ? username : other.username;
    year = other.year == null ? year : other.year;
    college = other.college == null ? college : other.college;
    major = other.major == null ? major : other.major;
    interests = other.interests == null ? interests : other.interests;
    aud = other.aud == null ? aud : other.aud;
    enrollmentType = other.enrollmentType;
  }

  LoginDto({
    required this.idToken,
    required this.latF,
    required this.longF,
    this.username,
    this.year,
    this.college,
    this.major,
    this.interests,
    this.aud,
    required this.enrollmentType,
  });

  late String idToken;
  late double latF;
  late double longF;
  late String? username;
  late String? year;
  late String? college;
  late String? major;
  late String? interests;
  late LoginAudDto? aud;
  late LoginEnrollmentTypeDto enrollmentType;
}

class RefreshTokenDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['refreshToken'] = refreshToken;
    return fields;
  }

  RefreshTokenDto.fromJson(Map<String, dynamic> fields) {
    refreshToken = fields["refreshToken"];
  }

  void partialUpdate(RefreshTokenDto other) {
    refreshToken = other.refreshToken;
  }

  RefreshTokenDto({
    required this.refreshToken,
  });

  late String refreshToken;
}

class CompletedChallengeDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['challengeId'] = challengeId;
    return fields;
  }

  CompletedChallengeDto.fromJson(Map<String, dynamic> fields) {
    challengeId = fields["challengeId"];
  }

  void partialUpdate(CompletedChallengeDto other) {
    challengeId = other.challengeId;
  }

  CompletedChallengeDto({
    required this.challengeId,
  });

  late String challengeId;
}

class ChallengeDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['id'] = id;
    if (name != null) {
      fields['name'] = name;
    }
    if (location != null) {
      fields['location'] = location!.name;
    }
    if (description != null) {
      fields['description'] = description;
    }
    if (points != null) {
      fields['points'] = points;
    }
    if (imageUrl != null) {
      fields['imageUrl'] = imageUrl;
    }
    if (latF != null) {
      fields['latF'] = latF;
    }
    if (longF != null) {
      fields['longF'] = longF;
    }
    if (awardingRadiusF != null) {
      fields['awardingRadiusF'] = awardingRadiusF;
    }
    if (closeRadiusF != null) {
      fields['closeRadiusF'] = closeRadiusF;
    }
    if (linkedEventId != null) {
      fields['linkedEventId'] = linkedEventId;
    }
    return fields;
  }

  ChallengeDto.fromJson(Map<String, dynamic> fields) {
    id = fields["id"];
    name = fields.containsKey('name') ? (fields["name"]) : null;
    location = fields.containsKey('location')
        ? (ChallengeLocationDto.values.byName(fields['location']))
        : null;
    description =
        fields.containsKey('description') ? (fields["description"]) : null;
    points = fields.containsKey('points') ? (fields["points"]) : null;
    imageUrl = fields.containsKey('imageUrl') ? (fields["imageUrl"]) : null;
    latF = fields.containsKey('latF') ? (fields["latF"]!.toDouble()) : null;
    longF = fields.containsKey('longF') ? (fields["longF"]!.toDouble()) : null;
    awardingRadiusF = fields.containsKey('awardingRadiusF')
        ? (fields["awardingRadiusF"]!.toDouble())
        : null;
    closeRadiusF = fields.containsKey('closeRadiusF')
        ? (fields["closeRadiusF"]!.toDouble())
        : null;
    linkedEventId =
        fields.containsKey('linkedEventId') ? (fields["linkedEventId"]) : null;
  }

  void partialUpdate(ChallengeDto other) {
    id = other.id;
    name = other.name == null ? name : other.name;
    location = other.location == null ? location : other.location;
    description = other.description == null ? description : other.description;
    points = other.points == null ? points : other.points;
    imageUrl = other.imageUrl == null ? imageUrl : other.imageUrl;
    latF = other.latF == null ? latF : other.latF;
    longF = other.longF == null ? longF : other.longF;
    awardingRadiusF =
        other.awardingRadiusF == null ? awardingRadiusF : other.awardingRadiusF;
    closeRadiusF =
        other.closeRadiusF == null ? closeRadiusF : other.closeRadiusF;
    linkedEventId =
        other.linkedEventId == null ? linkedEventId : other.linkedEventId;
  }

  ChallengeDto({
    required this.id,
    this.name,
    this.location,
    this.description,
    this.points,
    this.imageUrl,
    this.latF,
    this.longF,
    this.awardingRadiusF,
    this.closeRadiusF,
    this.linkedEventId,
  });

  late String id;
  late String? name;
  late ChallengeLocationDto? location;
  late String? description;
  late int? points;
  late String? imageUrl;
  late double? latF;
  late double? longF;
  late double? awardingRadiusF;
  late double? closeRadiusF;
  late String? linkedEventId;
}

class RequestChallengeDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['challenges'] = challenges;
    return fields;
  }

  RequestChallengeDataDto.fromJson(Map<String, dynamic> fields) {
    challenges = List<String>.from(fields['challenges']);
  }

  void partialUpdate(RequestChallengeDataDto other) {
    challenges = other.challenges;
  }

  RequestChallengeDataDto({
    required this.challenges,
  });

  late List<String> challenges;
}

class UpdateChallengeDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['challenge'] = challenge!.toJson();
    fields['deleted'] = deleted;
    return fields;
  }

  UpdateChallengeDataDto.fromJson(Map<String, dynamic> fields) {
    challenge = ChallengeDto.fromJson(fields['challenge']);
    deleted = fields["deleted"];
  }

  void partialUpdate(UpdateChallengeDataDto other) {
    challenge = other.challenge;
    deleted = other.deleted;
  }

  UpdateChallengeDataDto({
    required this.challenge,
    required this.deleted,
  });

  late ChallengeDto challenge;
  late bool deleted;
}

class RequestEventTrackerDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['trackedEvents'] = trackedEvents;
    return fields;
  }

  RequestEventTrackerDataDto.fromJson(Map<String, dynamic> fields) {
    trackedEvents = List<String>.from(fields['trackedEvents']);
  }

  void partialUpdate(RequestEventTrackerDataDto other) {
    trackedEvents = other.trackedEvents;
  }

  RequestEventTrackerDataDto({
    required this.trackedEvents,
  });

  late List<String> trackedEvents;
}

class SetCurrentChallengeDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['challengeId'] = challengeId;
    return fields;
  }

  SetCurrentChallengeDto.fromJson(Map<String, dynamic> fields) {
    challengeId = fields["challengeId"];
  }

  void partialUpdate(SetCurrentChallengeDto other) {
    challengeId = other.challengeId;
  }

  SetCurrentChallengeDto({
    required this.challengeId,
  });

  late String challengeId;
}

class LeaderDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['userId'] = userId;
    fields['username'] = username;
    fields['score'] = score;
    return fields;
  }

  LeaderDto.fromJson(Map<String, dynamic> fields) {
    userId = fields["userId"];
    username = fields["username"];
    score = fields["score"];
  }

  void partialUpdate(LeaderDto other) {
    userId = other.userId;
    username = other.username;
    score = other.score;
  }

  LeaderDto({
    required this.userId,
    required this.username,
    required this.score,
  });

  late String userId;
  late String username;
  late int score;
}

class UpdateLeaderDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['eventId'] = eventId;
    fields['offset'] = offset;
    fields['users'] = users!
        .map<Map<String, dynamic>>((dynamic val) => val!.toJson())
        .toList();
    return fields;
  }

  UpdateLeaderDataDto.fromJson(Map<String, dynamic> fields) {
    eventId = fields["eventId"];
    offset = fields["offset"];
    users = fields["users"]
        .map<LeaderDto>((dynamic val) => LeaderDto.fromJson(val))
        .toList();
  }

  void partialUpdate(UpdateLeaderDataDto other) {
    eventId = other.eventId;
    offset = other.offset;
    users = other.users;
  }

  UpdateLeaderDataDto({
    required this.eventId,
    required this.offset,
    required this.users,
  });

  late String eventId;
  late int offset;
  late List<LeaderDto> users;
}

class UpdateErrorDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['id'] = id;
    fields['message'] = message;
    return fields;
  }

  UpdateErrorDto.fromJson(Map<String, dynamic> fields) {
    id = fields["id"];
    message = fields["message"];
  }

  void partialUpdate(UpdateErrorDto other) {
    id = other.id;
    message = other.message;
  }

  UpdateErrorDto({
    required this.id,
    required this.message,
  });

  late String id;
  late String message;
}

class RequestFilteredEventsDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['difficulty'] = difficulty;
    fields['location'] = location;
    fields['category'] = category;
    fields['filterId'] = filterId;
    return fields;
  }

  RequestFilteredEventsDto.fromJson(Map<String, dynamic> fields) {
    difficulty = List<String>.from(fields['difficulty']);
    location = List<String>.from(fields['location']);
    category = List<String>.from(fields['category']);
    filterId = List<String>.from(fields['filterId']);
  }

  void partialUpdate(RequestFilteredEventsDto other) {
    difficulty = other.difficulty;
    location = other.location;
    category = other.category;
    filterId = other.filterId;
  }

  RequestFilteredEventsDto({
    required this.difficulty,
    required this.location,
    required this.category,
    required this.filterId,
  });

  late List<String> difficulty;
  late List<String> location;
  late List<String> category;
  late List<String> filterId;
}

class RequestEventDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    if (events != null) {
      fields['events'] = events;
    }
    return fields;
  }

  RequestEventDataDto.fromJson(Map<String, dynamic> fields) {
    events = fields.containsKey('events')
        ? (List<String>.from(fields['events']))
        : null;
  }

  void partialUpdate(RequestEventDataDto other) {
    events = other.events == null ? events : other.events;
  }

  RequestEventDataDto({
    this.events,
  });

  late List<String>? events;
}

class RequestEventLeaderDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['offset'] = offset;
    fields['count'] = count;
    fields['eventId'] = eventId;
    return fields;
  }

  RequestEventLeaderDataDto.fromJson(Map<String, dynamic> fields) {
    offset = fields["offset"];
    count = fields["count"];
    eventId = fields["eventId"];
  }

  void partialUpdate(RequestEventLeaderDataDto other) {
    offset = other.offset;
    count = other.count;
    eventId = other.eventId;
  }

  RequestEventLeaderDataDto({
    required this.offset,
    required this.count,
    required this.eventId,
  });

  late int offset;
  late int count;
  late String eventId;
}

class RequestRecommendedEventsDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['latitudeF'] = latitudeF;
    fields['longitudeF'] = longitudeF;
    if (count != null) {
      fields['count'] = count;
    }
    return fields;
  }

  RequestRecommendedEventsDto.fromJson(Map<String, dynamic> fields) {
    latitudeF = fields["latitudeF"]!.toDouble();
    longitudeF = fields["longitudeF"]!.toDouble();
    count = fields.containsKey('count') ? (fields["count"]) : null;
  }

  void partialUpdate(RequestRecommendedEventsDto other) {
    latitudeF = other.latitudeF;
    longitudeF = other.longitudeF;
    count = other.count == null ? count : other.count;
  }

  RequestRecommendedEventsDto({
    required this.latitudeF,
    required this.longitudeF,
    this.count,
  });

  late double latitudeF;
  late double longitudeF;
  late int? count;
}

class EventDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['id'] = id;
    if (requiredMembers != null) {
      fields['requiredMembers'] = requiredMembers;
    }
    if (name != null) {
      fields['name'] = name;
    }
    if (description != null) {
      fields['description'] = description;
    }
    if (category != null) {
      fields['category'] = category!.name;
    }
    if (timeLimitation != null) {
      fields['timeLimitation'] = timeLimitation!.name;
    }
    if (endTime != null) {
      fields['endTime'] = endTime;
    }
    if (challenges != null) {
      fields['challenges'] = challenges;
    }
    if (userFavorites != null) {
      fields['userFavorites'] = userFavorites;
    }
    if (initialOrganizationId != null) {
      fields['initialOrganizationId'] = initialOrganizationId;
    }
    if (difficulty != null) {
      fields['difficulty'] = difficulty!.name;
    }
    if (indexable != null) {
      fields['indexable'] = indexable;
    }
    if (longitudeF != null) {
      fields['longitudeF'] = longitudeF;
    }
    if (latitudeF != null) {
      fields['latitudeF'] = latitudeF;
    }
    return fields;
  }

  EventDto.fromJson(Map<String, dynamic> fields) {
    id = fields["id"];
    requiredMembers = fields.containsKey('requiredMembers')
        ? (fields["requiredMembers"])
        : null;
    name = fields.containsKey('name') ? (fields["name"]) : null;
    description =
        fields.containsKey('description') ? (fields["description"]) : null;
    category = fields.containsKey('category')
        ? (EventCategoryDto.values.byName(fields['category']))
        : null;
    timeLimitation = fields.containsKey('timeLimitation')
        ? (EventTimeLimitationDto.values.byName(fields['timeLimitation']))
        : null;
    endTime = fields.containsKey('endTime') ? (fields["endTime"]) : null;
    challenges = fields.containsKey('challenges')
        ? (List<String>.from(fields['challenges']))
        : null;
    userFavorites = fields.containsKey('userFavorites')
        ? (List<String>.from(fields['userFavorites']))
        : null;
    initialOrganizationId = fields.containsKey('initialOrganizationId')
        ? (fields["initialOrganizationId"])
        : null;
    difficulty = fields.containsKey('difficulty')
        ? (EventDifficultyDto.values.byName(fields['difficulty']))
        : null;
    indexable = fields.containsKey('indexable') ? (fields["indexable"]) : null;
    longitudeF = fields.containsKey('longitudeF')
        ? (fields["longitudeF"]!.toDouble())
        : null;
    latitudeF = fields.containsKey('latitudeF')
        ? (fields["latitudeF"]!.toDouble())
        : null;
  }

  void partialUpdate(EventDto other) {
    id = other.id;
    requiredMembers =
        other.requiredMembers == null ? requiredMembers : other.requiredMembers;
    name = other.name == null ? name : other.name;
    description = other.description == null ? description : other.description;
    category = other.category == null ? category : other.category;
    timeLimitation =
        other.timeLimitation == null ? timeLimitation : other.timeLimitation;
    endTime = other.endTime == null ? endTime : other.endTime;
    challenges = other.challenges == null ? challenges : other.challenges;
    userFavorites =
        other.userFavorites == null ? userFavorites : other.userFavorites;
    initialOrganizationId = other.initialOrganizationId == null
        ? initialOrganizationId
        : other.initialOrganizationId;
    difficulty = other.difficulty == null ? difficulty : other.difficulty;
    indexable = other.indexable == null ? indexable : other.indexable;
    longitudeF = other.longitudeF == null ? longitudeF : other.longitudeF;
    latitudeF = other.latitudeF == null ? latitudeF : other.latitudeF;
  }

  EventDto({
    required this.id,
    this.requiredMembers,
    this.name,
    this.description,
    this.category,
    this.timeLimitation,
    this.endTime,
    this.challenges,
    this.userFavorites,
    this.initialOrganizationId,
    this.difficulty,
    this.indexable,
    this.longitudeF,
    this.latitudeF,
  });

  late String id;
  late int? requiredMembers;
  late String? name;
  late String? description;
  late EventCategoryDto? category;
  late EventTimeLimitationDto? timeLimitation;
  late String? endTime;
  late List<String>? challenges;
  late List<String>? userFavorites;
  late String? initialOrganizationId;
  late EventDifficultyDto? difficulty;
  late bool? indexable;
  late double? longitudeF;
  late double? latitudeF;
}

class PrevChallengeDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['challengeId'] = challengeId;
    fields['hintsUsed'] = hintsUsed;
    fields['dateCompleted'] = dateCompleted;
    return fields;
  }

  PrevChallengeDto.fromJson(Map<String, dynamic> fields) {
    challengeId = fields["challengeId"];
    hintsUsed = fields["hintsUsed"];
    dateCompleted = fields["dateCompleted"];
  }

  void partialUpdate(PrevChallengeDto other) {
    challengeId = other.challengeId;
    hintsUsed = other.hintsUsed;
    dateCompleted = other.dateCompleted;
  }

  PrevChallengeDto({
    required this.challengeId,
    required this.hintsUsed,
    required this.dateCompleted,
  });

  late String challengeId;
  late int hintsUsed;
  late String dateCompleted;
}

class EventTrackerDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['eventId'] = eventId;
    fields['isRanked'] = isRanked;
    fields['hintsUsed'] = hintsUsed;
    fields['curChallengeId'] = curChallengeId;
    fields['prevChallenges'] = prevChallenges!
        .map<Map<String, dynamic>>((dynamic val) => val!.toJson())
        .toList();
    return fields;
  }

  EventTrackerDto.fromJson(Map<String, dynamic> fields) {
    eventId = fields["eventId"];
    isRanked = fields["isRanked"];
    hintsUsed = fields["hintsUsed"];
    curChallengeId = fields["curChallengeId"];
    prevChallenges = fields["prevChallenges"]
        .map<PrevChallengeDto>((dynamic val) => PrevChallengeDto.fromJson(val))
        .toList();
  }

  void partialUpdate(EventTrackerDto other) {
    eventId = other.eventId;
    isRanked = other.isRanked;
    hintsUsed = other.hintsUsed;
    curChallengeId = other.curChallengeId;
    prevChallenges = other.prevChallenges;
  }

  EventTrackerDto({
    required this.eventId,
    required this.isRanked,
    required this.hintsUsed,
    required this.curChallengeId,
    required this.prevChallenges,
  });

  late String eventId;
  late bool isRanked;
  late int hintsUsed;
  late String curChallengeId;
  late List<PrevChallengeDto> prevChallenges;
}

class UpdateEventTrackerDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['tracker'] = tracker!.toJson();
    return fields;
  }

  UpdateEventTrackerDataDto.fromJson(Map<String, dynamic> fields) {
    tracker = EventTrackerDto.fromJson(fields['tracker']);
  }

  void partialUpdate(UpdateEventTrackerDataDto other) {
    tracker = other.tracker;
  }

  UpdateEventTrackerDataDto({
    required this.tracker,
  });

  late EventTrackerDto tracker;
}

class UpdateEventDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['event'] = event!.toJson();
    fields['deleted'] = deleted;
    return fields;
  }

  UpdateEventDataDto.fromJson(Map<String, dynamic> fields) {
    event = EventDto.fromJson(fields['event']);
    deleted = fields["deleted"];
  }

  void partialUpdate(UpdateEventDataDto other) {
    event = other.event;
    deleted = other.deleted;
  }

  UpdateEventDataDto({
    required this.event,
    required this.deleted,
  });

  late EventDto event;
  late bool deleted;
}

class UseEventTrackerHintDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    return fields;
  }

  UseEventTrackerHintDto.fromJson(Map<String, dynamic> fields) {}

  void partialUpdate(UseEventTrackerHintDto other) {}

  UseEventTrackerHintDto();
}

class JoinGroupDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['groupId'] = groupId;
    return fields;
  }

  JoinGroupDto.fromJson(Map<String, dynamic> fields) {
    groupId = fields["groupId"];
  }

  void partialUpdate(JoinGroupDto other) {
    groupId = other.groupId;
  }

  JoinGroupDto({
    required this.groupId,
  });

  late String groupId;
}

class LeaveGroupDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    return fields;
  }

  LeaveGroupDto.fromJson(Map<String, dynamic> fields) {}

  void partialUpdate(LeaveGroupDto other) {}

  LeaveGroupDto();
}

class RequestGroupDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    return fields;
  }

  RequestGroupDataDto.fromJson(Map<String, dynamic> fields) {}

  void partialUpdate(RequestGroupDataDto other) {}

  RequestGroupDataDto();
}

class SetCurrentEventDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['eventId'] = eventId;
    return fields;
  }

  SetCurrentEventDto.fromJson(Map<String, dynamic> fields) {
    eventId = fields["eventId"];
  }

  void partialUpdate(SetCurrentEventDto other) {
    eventId = other.eventId;
  }

  SetCurrentEventDto({
    required this.eventId,
  });

  late String eventId;
}

class GroupMemberDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['id'] = id;
    fields['name'] = name;
    fields['points'] = points;
    fields['curChallengeId'] = curChallengeId;
    return fields;
  }

  GroupMemberDto.fromJson(Map<String, dynamic> fields) {
    id = fields["id"];
    name = fields["name"];
    points = fields["points"];
    curChallengeId = fields["curChallengeId"];
  }

  void partialUpdate(GroupMemberDto other) {
    id = other.id;
    name = other.name;
    points = other.points;
    curChallengeId = other.curChallengeId;
  }

  GroupMemberDto({
    required this.id,
    required this.name,
    required this.points,
    required this.curChallengeId,
  });

  late String id;
  late String name;
  late int points;
  late String curChallengeId;
}

class GroupDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['id'] = id;
    if (friendlyId != null) {
      fields['friendlyId'] = friendlyId;
    }
    if (hostId != null) {
      fields['hostId'] = hostId;
    }
    if (curEventId != null) {
      fields['curEventId'] = curEventId;
    }
    if (members != null) {
      fields['members'] = members!
          .map<Map<String, dynamic>>((dynamic val) => val!.toJson())
          .toList();
    }
    return fields;
  }

  GroupDto.fromJson(Map<String, dynamic> fields) {
    id = fields["id"];
    friendlyId =
        fields.containsKey('friendlyId') ? (fields["friendlyId"]) : null;
    hostId = fields.containsKey('hostId') ? (fields["hostId"]) : null;
    curEventId =
        fields.containsKey('curEventId') ? (fields["curEventId"]) : null;
    members = fields.containsKey('members')
        ? (fields["members"]
            .map<GroupMemberDto>((dynamic val) => GroupMemberDto.fromJson(val))
            .toList())
        : null;
  }

  void partialUpdate(GroupDto other) {
    id = other.id;
    friendlyId = other.friendlyId == null ? friendlyId : other.friendlyId;
    hostId = other.hostId == null ? hostId : other.hostId;
    curEventId = other.curEventId == null ? curEventId : other.curEventId;
    members = other.members == null ? members : other.members;
  }

  GroupDto({
    required this.id,
    this.friendlyId,
    this.hostId,
    this.curEventId,
    this.members,
  });

  late String id;
  late String? friendlyId;
  late String? hostId;
  late String? curEventId;
  late List<GroupMemberDto>? members;
}

class UpdateGroupDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['group'] = group!.toJson();
    fields['deleted'] = deleted;
    return fields;
  }

  UpdateGroupDataDto.fromJson(Map<String, dynamic> fields) {
    group = GroupDto.fromJson(fields['group']);
    deleted = fields["deleted"];
  }

  void partialUpdate(UpdateGroupDataDto other) {
    group = other.group;
    deleted = other.deleted;
  }

  UpdateGroupDataDto({
    required this.group,
    required this.deleted,
  });

  late GroupDto group;
  late bool deleted;
}

class GroupInviteDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['groupId'] = groupId;
    fields['username'] = username;
    return fields;
  }

  GroupInviteDto.fromJson(Map<String, dynamic> fields) {
    groupId = fields["groupId"];
    username = fields["username"];
  }

  void partialUpdate(GroupInviteDto other) {
    groupId = other.groupId;
    username = other.username;
  }

  GroupInviteDto({
    required this.groupId,
    required this.username,
  });

  late String groupId;
  late String username;
}

class SendGroupInviteDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['targetUsername'] = targetUsername;
    return fields;
  }

  SendGroupInviteDto.fromJson(Map<String, dynamic> fields) {
    targetUsername = fields["targetUsername"];
  }

  void partialUpdate(SendGroupInviteDto other) {
    targetUsername = other.targetUsername;
  }

  SendGroupInviteDto({
    required this.targetUsername,
  });

  late String targetUsername;
}

class OrganizationDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['id'] = id;
    if (name != null) {
      fields['name'] = name;
    }
    if (accessCode != null) {
      fields['accessCode'] = accessCode;
    }
    if (members != null) {
      fields['members'] = members;
    }
    if (events != null) {
      fields['events'] = events;
    }
    if (managers != null) {
      fields['managers'] = managers;
    }
    return fields;
  }

  OrganizationDto.fromJson(Map<String, dynamic> fields) {
    id = fields["id"];
    name = fields.containsKey('name') ? (fields["name"]) : null;
    accessCode =
        fields.containsKey('accessCode') ? (fields["accessCode"]) : null;
    members = fields.containsKey('members')
        ? (List<String>.from(fields['members']))
        : null;
    events = fields.containsKey('events')
        ? (List<String>.from(fields['events']))
        : null;
    managers = fields.containsKey('managers')
        ? (List<String>.from(fields['managers']))
        : null;
  }

  void partialUpdate(OrganizationDto other) {
    id = other.id;
    name = other.name == null ? name : other.name;
    accessCode = other.accessCode == null ? accessCode : other.accessCode;
    members = other.members == null ? members : other.members;
    events = other.events == null ? events : other.events;
    managers = other.managers == null ? managers : other.managers;
  }

  OrganizationDto({
    required this.id,
    this.name,
    this.accessCode,
    this.members,
    this.events,
    this.managers,
  });

  late String id;
  late String? name;
  late String? accessCode;
  late List<String>? members;
  late List<String>? events;
  late List<String>? managers;
}

class RequestOrganizationDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['admin'] = admin;
    return fields;
  }

  RequestOrganizationDataDto.fromJson(Map<String, dynamic> fields) {
    admin = fields["admin"];
  }

  void partialUpdate(RequestOrganizationDataDto other) {
    admin = other.admin;
  }

  RequestOrganizationDataDto({
    required this.admin,
  });

  late bool admin;
}

class UpdateOrganizationDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['organization'] = organization!.toJson();
    fields['deleted'] = deleted;
    return fields;
  }

  UpdateOrganizationDataDto.fromJson(Map<String, dynamic> fields) {
    organization = OrganizationDto.fromJson(fields['organization']);
    deleted = fields["deleted"];
  }

  void partialUpdate(UpdateOrganizationDataDto other) {
    organization = other.organization;
    deleted = other.deleted;
  }

  UpdateOrganizationDataDto({
    required this.organization,
    required this.deleted,
  });

  late OrganizationDto organization;
  late bool deleted;
}

class CloseAccountDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    return fields;
  }

  CloseAccountDto.fromJson(Map<String, dynamic> fields) {}

  void partialUpdate(CloseAccountDto other) {}

  CloseAccountDto();
}

class SetUsernameDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['newUsername'] = newUsername;
    return fields;
  }

  SetUsernameDto.fromJson(Map<String, dynamic> fields) {
    newUsername = fields["newUsername"];
  }

  void partialUpdate(SetUsernameDto other) {
    newUsername = other.newUsername;
  }

  SetUsernameDto({
    required this.newUsername,
  });

  late String newUsername;
}

class SetCollegeDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['newCollege'] = newCollege;
    return fields;
  }

  SetCollegeDto.fromJson(Map<String, dynamic> fields) {
    newCollege = fields["newCollege"];
  }

  void partialUpdate(SetCollegeDto other) {
    newCollege = other.newCollege;
  }

  SetCollegeDto({
    required this.newCollege,
  });

  late String newCollege;
}

class SetMajorDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['newMajor'] = newMajor;
    return fields;
  }

  SetMajorDto.fromJson(Map<String, dynamic> fields) {
    newMajor = fields["newMajor"];
  }

  void partialUpdate(SetMajorDto other) {
    newMajor = other.newMajor;
  }

  SetMajorDto({
    required this.newMajor,
  });

  late String newMajor;
}

class SetGraduationYearDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['newYear'] = newYear;
    return fields;
  }

  SetGraduationYearDto.fromJson(Map<String, dynamic> fields) {
    newYear = fields["newYear"];
  }

  void partialUpdate(SetGraduationYearDto other) {
    newYear = other.newYear;
  }

  SetGraduationYearDto({
    required this.newYear,
  });

  late String newYear;
}

class BanUserDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['userId'] = userId;
    fields['isBanned'] = isBanned;
    return fields;
  }

  BanUserDto.fromJson(Map<String, dynamic> fields) {
    userId = fields["userId"];
    isBanned = fields["isBanned"];
  }

  void partialUpdate(BanUserDto other) {
    userId = other.userId;
    isBanned = other.isBanned;
  }

  BanUserDto({
    required this.userId,
    required this.isBanned,
  });

  late String userId;
  late bool isBanned;
}

class SetAuthToOAuthDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['provider'] = provider!.name;
    fields['authId'] = authId;
    return fields;
  }

  SetAuthToOAuthDto.fromJson(Map<String, dynamic> fields) {
    provider = SetAuthToOAuthProviderDto.values.byName(fields['provider']);
    authId = fields["authId"];
  }

  void partialUpdate(SetAuthToOAuthDto other) {
    provider = other.provider;
    authId = other.authId;
  }

  SetAuthToOAuthDto({
    required this.provider,
    required this.authId,
  });

  late SetAuthToOAuthProviderDto provider;
  late String authId;
}

class SetAuthToDeviceDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['deviceId'] = deviceId;
    return fields;
  }

  SetAuthToDeviceDto.fromJson(Map<String, dynamic> fields) {
    deviceId = fields["deviceId"];
  }

  void partialUpdate(SetAuthToDeviceDto other) {
    deviceId = other.deviceId;
  }

  SetAuthToDeviceDto({
    required this.deviceId,
  });

  late String deviceId;
}

class RequestGlobalLeaderDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['offset'] = offset;
    fields['count'] = count;
    return fields;
  }

  RequestGlobalLeaderDataDto.fromJson(Map<String, dynamic> fields) {
    offset = fields["offset"];
    count = fields["count"];
  }

  void partialUpdate(RequestGlobalLeaderDataDto other) {
    offset = other.offset;
    count = other.count;
  }

  RequestGlobalLeaderDataDto({
    required this.offset,
    required this.count,
  });

  late int offset;
  late int count;
}

class RequestUserDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    if (userId != null) {
      fields['userId'] = userId;
    }
    return fields;
  }

  RequestUserDataDto.fromJson(Map<String, dynamic> fields) {
    userId = fields.containsKey('userId') ? (fields["userId"]) : null;
  }

  void partialUpdate(RequestUserDataDto other) {
    userId = other.userId == null ? userId : other.userId;
  }

  RequestUserDataDto({
    this.userId,
  });

  late String? userId;
}

class RequestAllUserDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    return fields;
  }

  RequestAllUserDataDto.fromJson(Map<String, dynamic> fields) {}

  void partialUpdate(RequestAllUserDataDto other) {}

  RequestAllUserDataDto();
}

class RequestFavoriteEventDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['isFavorite'] = isFavorite;
    fields['eventId'] = eventId;
    return fields;
  }

  RequestFavoriteEventDataDto.fromJson(Map<String, dynamic> fields) {
    isFavorite = fields["isFavorite"];
    eventId = fields["eventId"];
  }

  void partialUpdate(RequestFavoriteEventDataDto other) {
    isFavorite = other.isFavorite;
    eventId = other.eventId;
  }

  RequestFavoriteEventDataDto({
    required this.isFavorite,
    required this.eventId,
  });

  late bool isFavorite;
  late String eventId;
}

class UserDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['id'] = id;
    if (username != null) {
      fields['username'] = username;
    }
    if (enrollmentType != null) {
      fields['enrollmentType'] = enrollmentType!.name;
    }
    if (email != null) {
      fields['email'] = email;
    }
    if (year != null) {
      fields['year'] = year;
    }
    if (college != null) {
      fields['college'] = college;
    }
    if (major != null) {
      fields['major'] = major;
    }
    if (interests != null) {
      fields['interests'] = interests;
    }
    if (score != null) {
      fields['score'] = score;
    }
    if (isBanned != null) {
      fields['isBanned'] = isBanned;
    }
    if (groupId != null) {
      fields['groupId'] = groupId;
    }
    if (authType != null) {
      fields['authType'] = authType!.name;
    }
    if (trackedEvents != null) {
      fields['trackedEvents'] = trackedEvents;
    }
    if (favorites != null) {
      fields['favorites'] = favorites;
    }
    return fields;
  }

  UserDto.fromJson(Map<String, dynamic> fields) {
    id = fields["id"];
    username = fields.containsKey('username') ? (fields["username"]) : null;
    enrollmentType = fields.containsKey('enrollmentType')
        ? (UserEnrollmentTypeDto.values.byName(fields['enrollmentType']))
        : null;
    email = fields.containsKey('email') ? (fields["email"]) : null;
    year = fields.containsKey('year') ? (fields["year"]) : null;
    college = fields.containsKey('college') ? (fields["college"]) : null;
    major = fields.containsKey('major') ? (fields["major"]) : null;
    interests = fields.containsKey('interests')
        ? (List<String>.from(fields['interests']))
        : null;
    score = fields.containsKey('score') ? (fields["score"]) : null;
    isBanned = fields.containsKey('isBanned') ? (fields["isBanned"]) : null;
    groupId = fields.containsKey('groupId') ? (fields["groupId"]) : null;
    authType = fields.containsKey('authType')
        ? (UserAuthTypeDto.values.byName(fields['authType']))
        : null;
    trackedEvents = fields.containsKey('trackedEvents')
        ? (List<String>.from(fields['trackedEvents']))
        : null;
    favorites = fields.containsKey('favorites')
        ? (List<String>.from(fields['favorites']))
        : null;
  }

  void partialUpdate(UserDto other) {
    id = other.id;
    username = other.username == null ? username : other.username;
    enrollmentType =
        other.enrollmentType == null ? enrollmentType : other.enrollmentType;
    email = other.email == null ? email : other.email;
    year = other.year == null ? year : other.year;
    college = other.college == null ? college : other.college;
    major = other.major == null ? major : other.major;
    interests = other.interests == null ? interests : other.interests;
    score = other.score == null ? score : other.score;
    isBanned = other.isBanned == null ? isBanned : other.isBanned;
    groupId = other.groupId == null ? groupId : other.groupId;
    authType = other.authType == null ? authType : other.authType;
    trackedEvents =
        other.trackedEvents == null ? trackedEvents : other.trackedEvents;
    favorites = other.favorites == null ? favorites : other.favorites;
  }

  UserDto({
    required this.id,
    this.username,
    this.enrollmentType,
    this.email,
    this.year,
    this.college,
    this.major,
    this.interests,
    this.score,
    this.isBanned,
    this.groupId,
    this.authType,
    this.trackedEvents,
    this.favorites,
  });

  late String id;
  late String? username;
  late UserEnrollmentTypeDto? enrollmentType;
  late String? email;
  late String? year;
  late String? college;
  late String? major;
  late List<String>? interests;
  late int? score;
  late bool? isBanned;
  late String? groupId;
  late UserAuthTypeDto? authType;
  late List<String>? trackedEvents;
  late List<String>? favorites;
}

class UpdateUserDataDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['user'] = user!.toJson();
    fields['deleted'] = deleted;
    return fields;
  }

  UpdateUserDataDto.fromJson(Map<String, dynamic> fields) {
    user = UserDto.fromJson(fields['user']);
    deleted = fields["deleted"];
  }

  void partialUpdate(UpdateUserDataDto other) {
    user = other.user;
    deleted = other.deleted;
  }

  UpdateUserDataDto({
    required this.user,
    required this.deleted,
  });

  late UserDto user;
  late bool deleted;
}

class AddManagerDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['email'] = email;
    fields['organizationId'] = organizationId;
    return fields;
  }

  AddManagerDto.fromJson(Map<String, dynamic> fields) {
    email = fields["email"];
    organizationId = fields["organizationId"];
  }

  void partialUpdate(AddManagerDto other) {
    email = other.email;
    organizationId = other.organizationId;
  }

  AddManagerDto({
    required this.email,
    required this.organizationId,
  });

  late String email;
  late String organizationId;
}

class JoinOrganizationDto {
  Map<String, dynamic> toJson() {
    Map<String, dynamic> fields = {};
    fields['accessCode'] = accessCode;
    return fields;
  }

  JoinOrganizationDto.fromJson(Map<String, dynamic> fields) {
    accessCode = fields["accessCode"];
  }

  void partialUpdate(JoinOrganizationDto other) {
    accessCode = other.accessCode;
  }

  JoinOrganizationDto({
    required this.accessCode,
  });

  late String accessCode;
}
