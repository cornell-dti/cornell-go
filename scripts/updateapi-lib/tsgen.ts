import { ApiDefs, DtoDefs } from "./types";

export function genTsDtoFile(dtoDefs: DtoDefs) {
  let tsCode = "// CODE AUTOGENERATED BY npm run updateapi\n";

  for (const [name, fields] of dtoDefs.enumDtos.entries()) {
    tsCode += `type ${name} =`;
    for (const field of fields) {
      tsCode += `\n  | "${field}"`;
    }
    tsCode += ";\n\n";
  }

  for (const [name, propMap] of dtoDefs.baseDtos.entries()) {
    tsCode += `export interface ${name} {\n`;
    for (const [
      propName,
      [typeName, fieldType, isOptional],
    ] of propMap.entries()) {
      const isArray =
        fieldType == "ENUM_DTO[]" ||
        fieldType == "DEPENDENT_DTO[]" ||
        fieldType == "PRIMITIVE[]";

      const fullType = isArray ? `${typeName}[]` : typeName;

      tsCode += `  ${propName}`;
      if (isOptional) {
        tsCode += "?";
      }
      tsCode += `: ${fullType};\n`;
    }

    tsCode += "}\n\n";
  }

  return tsCode;
}

export function getAdminApiFile(apiDefs: ApiDefs) {
  let tsCode = `
    // CODE AUTOGENERATED BY npm run updateapi
    import { Socket } from "socket.io-client";
    import * as dto from "../all.dto";

    export class ServerApi {
      constructor(private socket: Socket) {}

      send(ev: string, data: {}) {
        console.log(\`Sending \${ev} with \${JSON.stringify(data)}\`);
        this.socket.emit(ev, data);
      }

  `;

  for (const [ev, dto] of apiDefs.serverEntrypoints.entries()) {
    tsCode += `
      ${ev}(data: dto.${dto}) {
        this.send("${ev}", data);
      }

    `;
  }

  for (const [ev, dto] of apiDefs.clientEntrypoints.entries()) {
    const formattedName = ev[0].toUpperCase() + ev.substring(1);

    tsCode += `
      on${formattedName}(callback: (data: dto.${dto}) => void) {
        this.socket.removeAllListeners("${ev}");
        this.socket.on("${ev}", (data) => callback(data));
      }

    `;
  }

  tsCode += "}";

  return tsCode;
}
